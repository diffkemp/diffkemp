OPTION(VENDOR_GTEST "Vendor Google Test libraries" OFF)
if (${VENDOR_GTEST})
# Download and unpack googletest at configure time
configure_file(CMakeLists.txt.in googletest-download/CMakeLists.txt)
execute_process(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
                WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/googletest-download")
execute_process(COMMAND "${CMAKE_COMMAND}" --build .
                WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/googletest-download")

# Add googletest directly to our build. This adds the following targets:
# gtest, gtest_main, gmock and gmock_main
add_subdirectory("${CMAKE_CURRENT_BINARY_DIR}/googletest-src"
                 "${CMAKE_CURRENT_BINARY_DIR}/googletest-build"
                 EXCLUDE_FROM_ALL)
 endif(${VENDOR_GTEST})

# Disable RTTI to link with SimpLL correctly.
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti -fvisibility=hidden")

if (${SANITIZE_ADDRESS})
  add_compile_options(-fsanitize=address -fno-omit-frame-pointer)
  add_link_options(-fsanitize=address -fno-omit-frame-pointer)
endif()

enable_testing()

include_directories(${CMAKE_SOURCE_DIR}/diffkemp/simpll)

file(GLOB pass_tests passes/*.cpp)
add_executable(runTests SimpLLTest.cpp DifferentialFunctionComparatorTest.cpp
               FieldAccessUtilsTest.cpp DFCLlvmIrTest.cpp ${pass_tests})

execute_process(COMMAND llvm-config --libs irreader passes support
                OUTPUT_VARIABLE llvm_libs
                OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND llvm-config --system-libs
                OUTPUT_VARIABLE system_libs
                OUTPUT_STRIP_TRAILING_WHITESPACE)

# Try to find system-wide Z3 (e.g. local build)
find_package(Z3 CONFIG)
if (NOT ${Z3_FOUND})
    # Use our FindZ3.cmake (e.g. nix build)
    find_package(Z3 REQUIRED MODULE)
endif()

target_include_directories(runTests PRIVATE ${Z3_CXX_INCLUDE_DIRS})
target_link_libraries(runTests gtest simpll-lib ${llvm_libs} ${Z3_LIBRARIES})
target_compile_options(runTests PRIVATE ${Z3_COMPONENT_CXX_FLAGS})
if (NOT ${system_libs} STREQUAL "")
	target_link_libraries(runTests gtest ${system_libs})
endif()

include(GoogleTest)
gtest_discover_tests(runTests)
add_custom_target(test
  COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure
  DEPENDS runTests)

message(STATUS "Creating pytest tests executable")
add_custom_target(pytest-test
    COMMAND python ${CMAKE_BINARY_DIR}/bin/run_pytest_tests.py)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../run_pytest_tests.py.in
  ${CMAKE_BINARY_DIR}/bin/run_pytest_tests.py
  FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
                   GROUP_READ
                   WORLD_READ)

//===-- FunctionAbstractionsGenerator.h - Abstracting non-function calls --===//
//
//       SimpLL - Program simplifier for analysis of semantic difference      //
//
// This file is published under Apache 2.0 license. See LICENSE for details.
// Author: Viktor Malik, vmalik@redhat.com
//===----------------------------------------------------------------------===//
///
/// \file
/// This file contains the declaration of the class and functions for generating
/// abstractions for indirect calls and inline assemblies.
///
//===----------------------------------------------------------------------===//

#ifndef DIFFKEMP_SIMPLL_FUNCTIONABSTRACTIONSGENERATOR_H
#define DIFFKEMP_SIMPLL_FUNCTIONABSTRACTIONSGENERATOR_H

#include <llvm/IR/Instructions.h>
#include <llvm/IR/PassManager.h>
#include <llvm/IR/Value.h>

#include <set>
#include <unordered_map>

const std::string SimpllInlineAsmPrefix = "simpll__inlineasm.";
const std::string SimpllIndirectFunctionPrefix = "simpll__indirect.";

using namespace llvm;

/// Generates abstractions for indirect function calls and for inline
/// assemblies. One abstraction function corresponds to one function type in the
/// case of indirect calls and to one pair of inline assembly code and
/// constraint in the case of inline assembly values.
class FunctionAbstractionsGenerator
        : public AnalysisInfoMixin<FunctionAbstractionsGenerator> {
  public:
    typedef std::unordered_map<std::string, Function *> FunMap;
    struct Result {
        FunMap funAbstractions;
    };

    Result run(Module &Mod,
               AnalysisManager<Module, Function *> &mam,
               Function *Main);

  protected:
    /// Hash of the abstraction function to be used in the function map.
    /// \param Fun Called value (can be a value or an inline assembly).
    std::string funHash(CallInst *Fun);

    /// Prefix of the abstraction function.
    /// \param Fun Called value (can be a value or an inline assembly).
    std::string abstractionPrefix(Value *Fun);

  private:
    friend AnalysisInfoMixin<FunctionAbstractionsGenerator>;
    static AnalysisKey Key;
};

/// Returns true if the function is an abstraction generated by
/// FunctionAbstractionsGenerator.
bool isSimpllAbstractionDeclaration(const Function *Fun);

/// Returns true if the function is a SimpLL abstraction.
bool isSimpllAbstraction(const Function *Fun);

/// Extracts inline assembly code string from abstraction.
StringRef getInlineAsmString(const Function *Abstr);

/// Extracts inline assembly code constraint string from abstraction.
StringRef getInlineAsmConstraintString(const Function *Abstr);

#endif // DIFFKEMP_SIMPLL_FUNCTIONABSTRACTIONSGENERATOR_H

//===------------------ SimpLL.cpp - SimpLL entry point -------------------===//
//
//       SimpLL - Program simplifier for analysis of semantic difference      //
//
// This file is published under Apache 2.0 license. See LICENSE for details.
// Author: Viktor Malik, vmalik@redhat.com
//===----------------------------------------------------------------------===//
///
/// \file
/// This file contains the main function of the SimpLL tool.
///
//===----------------------------------------------------------------------===//

#include "Config.h"
#include "ModuleAnalysis.h"
#include "ModuleComparator.h"
#include "Output.h"
#include "Utils.h"

using namespace llvm;

// Command line options
cl::opt<std::string>
        FirstFileOpt(cl::Positional, cl::Required, cl::desc("<first file>"));
cl::opt<std::string>
        SecondFileOpt(cl::Positional, cl::Required, cl::desc("<second file>"));
cl::opt<std::string> FunctionOpt("fun",
                                 cl::value_desc("function"),
                                 cl::desc("Specify function to be analysed"));
cl::opt<std::string> VariableOpt(
        "var",
        cl::value_desc("variable"),
        cl::desc("Do analysis w.r.t. the value of the given variable"));
cl::opt<bool> OutputLlvmIROpt(
        "output-llvm-ir",
        cl::value_desc("Output each simplified module to a file."));
cl::opt<std::string>
        SuffixOpt("suffix",
                  cl::value_desc("suffix"),
                  cl::desc("Add suffix to names of simplified files."));
cl::opt<std::string> CacheDirOpt(
        "cache-dir",
        cl::value_desc("cache-dir"),
        cl::desc("Directory containing a SimpLL cache generated by DiffKemp."));
cl::opt<bool> ControlFlowOpt(
        "control-flow",
        cl::desc("Only keep instructions related to the control-flow."));
cl::opt<bool> PrintCallstacksOpt(
        "print-callstacks",
        cl::desc("Print call stacks for non-equal functions."));
cl::opt<int> VerbosityOpt(
        "verbosity",
        cl::desc("Level of verbose output (debugging information)."));
cl::opt<bool> PrintAsmDiffsOpt(
        "print-asm-diffs",
        cl::desc("Print raw differences in inline assembly code "
                 "(does not apply to macros)."));

/// Add suffix to the file name.
/// \param File Original file name.
/// \param Suffix Suffix to add.
/// \return File name with added suffix.
std::string addSuffix(std::string File, std::string Suffix) {
    unsigned long dotPos = File.find_last_of(".");
    return File.substr(0, dotPos) + "-" + Suffix + File.substr(dotPos);
}

int main(int argc, const char **argv) {
    // Parse CLI options
    cl::ParseCommandLineOptions(argc, argv);

    // Parse --fun option - find functions with given names.
    // The option can be either single function name (same for both modules)
    // or two function names separated by a comma.
    std::string FirstFunName, SecondFunName;
    if (!FunctionOpt.empty()) {
        auto commaPos = FunctionOpt.find(',');
        std::string first_name;
        std::string second_name;
        if (commaPos == std::string::npos) {
            first_name = FunctionOpt;
            second_name = FunctionOpt;
        } else {
            first_name = FunctionOpt.substr(0, commaPos);
            second_name = FunctionOpt.substr(commaPos + 1);
        }
        FirstFunName = first_name;
        SecondFunName = second_name;
    }

    // Load modules and create Config based on given CLI options
    LLVMContext context_first, context_second;
    SMDiagnostic err;
    std::unique_ptr<Module> FirstModule(
            parseIRFile(FirstFileOpt, err, context_first));
    std::unique_ptr<Module> SecondModule(
            parseIRFile(SecondFileOpt, err, context_second));
    Config config(FirstFunName,
                  SecondFunName,
                  FirstModule.get(),
                  SecondModule.get(),
                  !SuffixOpt.empty() ? addSuffix(FirstFileOpt, SuffixOpt) : "",
                  !SuffixOpt.empty() ? addSuffix(SecondFileOpt, SuffixOpt) : "",
                  CacheDirOpt,
                  VariableOpt,
                  OutputLlvmIROpt,
                  ControlFlowOpt,
                  PrintAsmDiffsOpt,
                  PrintCallstacksOpt,
                  VerbosityOpt);

    // Run transformations and the comparison.
    OverallResult Result;
    processAndCompare(config, Result);

    // Report the result to standard output.
    reportOutput(Result);

    llvm_shutdown();
    return 0;
}
